#+TITLE: frogmacs
#+AUTHOR: theadventureofe
#+EMAIL: theadventureofe@gmail.com
#+STARTUP: overview
-*- coding: utf-8 -*-
* PACKAGE_MANAGEMENT
** MELPA
   We need melpa to install packages
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC
** USE_PACKAGE
   use-package allows us to manage packages much easier
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC
* VISUALS
  these sections handle how emacs looks
** DIMINISH
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (use-package diminish)
#+END_SRC
** DISABLE_TOOLBARS
   disable annyoing and mostly useless toolbars
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)  
  (menu-bar-mode -1)
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC
** LINE_NUMBERS
   line numbers are always useful
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (column-number-mode 0)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
 term-mode-hook
 shell-mode-hook
 treemacs-mode-hook
 eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
** DOOM_STUFF
   doom visuals are pretty noice.
*** DOOM-MODELINE
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode  1)
    :custom (
    (doom-modeline-height 10)
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-window-width-limit fill-column)
    ))

;; default modeline stuff I don't want
(setq display-time-default-load-average nil)

#+END_SRC
*** ALL-THE-ICONS
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (use-package all-the-icons)
#+END_SRC
** NO_BLINKY_CURSOR
#+BEGIN_SRC emacs-lisp :tangle ./init.el
 (blink-cursor-mode 0)
#+END_SRC
** THEME
#+BEGIN_SRC emacs-lisp :tangle ./init.el
    (use-package autothemer
      :ensure t)

  (load-theme 'frog t)
#+END_SRC
** FONT
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (set-face-attribute 'default nil :font "iosevka" :height 120)
#+END_SRC
** FANCY_LAMBDAS
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (global-prettify-symbols-mode t)
#+END_SRC
** DISPLAY_BATTERY
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(display-battery-mode 1)
#+END_SRC
** TRAILING_WHITE_SPACE
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(setq-default show-trailing-whitespace t)
#+END_SRC
** EMOJI_SUPPORT
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package unicode-fonts
  :ensure t
  :config
  (unicode-fonts-setup))
#+END_SRC
* EXWM
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package exwm
:config
(setq exwm-worksapce-number 5)

(start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/Xmodmap")

(require 'exwm-randr)
(exwm-randr-enable)
(start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal")

(setq exwm-input-prefix-keys
'(?\C-x
?\C-u
?\C-h
?\M-x
?\M-`
?\M-&
?\M-:
?\C-\M-j
?\C-\ ))

(define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

(setq exwm-input-global-keys
`(
([?\s-r] . exwm-reset)

([?\s-&] . (lambda (command)
(interactive (list (read-shell-command "$ ")))
(start-process-shell-command command nil command)))))

(exwm-enable))

#+END_SRC
* FUNCTIONALITY
these sectons handle how emacs functions
** DISABLE_BACKUPS
stop emacs littering everywhere. Save often
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (setq make-backup-files nil)
#+END_SRC
** DEFAULT_DIRECTORY
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(setq default-directory "~/.emacs.d/")
#+END_SRC
** UTF-8_CODECS
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment   'utf-8)
(set-terminal-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(setq locale-coding-system  'utf-8)

(setenv "LANG" "en_GB.UTF-8")
(setenv "LC_ALL" "en_GB.UTF-8")
(setenv "LC_CTYPE" "en_GB.UTF-8")
#+END_SRC
** DISABLE_LOCKFILES(FOR_REACT)
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(setq create-lockfiles nil) 
#+END_SRC
** CONVSERVATIVE_SCROLLING
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (setq scroll-conservatively 100)
#+END_SRC
** AVOID_CLOSING_EMACS
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(global-unset-key (kbd "C-x C-c"))
#+END_SRC
* SNIPPETS
** YASNIPPET
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (use-package yasnippet)
  (yas-global-mode 1)
#+END_SRC
* ORG
** ORG_MODE
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (use-package org
  :pin org
  :commands (org-capture org-agenda)
  :config

 (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
        '("~/private/org/tasks.org"
          "~/private/org/habits.org"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))
)
#+END_SRC
** ORG_BULLETS
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** ORG_INDENT
this indenting is super annoying
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(org-indent-mode nil)
(electric-indent-mode -1)
(setq org-src-preserve-indentation t)
#+END_SRC
** ORG_DRILL
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package org-drill)
#+END_SRC
* EVIL
** EVIL_MODE
#+BEGIN_SRC emacs-lisp :tangle ./init.el
    (use-package evil
      :init
      (setq evil-want-abbrev-expand-on-insert-exit nil
            evil-want-keybinding nil)

      :config
      (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

;; allow keys to work in russian keyboard
    (evil-global-set-key 'motion "о" 'evil-next-visual-line)
    (evil-global-set-key 'motion "л" 'evil-previous-visual-line)
    (evil-global-set-key 'motion "д" 'evil-forward-char)
    (evil-global-set-key 'motion "р" 'evil-backward-char)

    (define-key evil-insert-state-map (kbd "C-п") 'evil-normal-state)
    (evil-global-set-key 'motion "ш" 'evil-insert)
)

    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
** EVIL_COLLECTION
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list
        '(ag dired magit mu4e which-key))
  (evil-collection-init))
#+END_SRC
** EVIL_SURROUND
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+END_SRC
** EVIL_ORG
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC
* LATEX
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package auctex
  :ensure t
  :defer t)

(use-package latex-preview-pane
  :ensure t
  :defer t)
#+END_SRC
* LSP
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package lsp-mode
  :ensure t
  :defer t
  :init
  (setq lsp-prefer-capf t)
  ;; 10Mb LSP consume large payloads so a higher value is required
  (setq read-process-output-max (* 10 1024 1024)))
#+END_SRC
* MODES
** C
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(reformatter-define c-format
  :program "clang-format")

(with-eval-after-load 'cc-mode
  (define-key c-mode-map (kbd "C-c C-f") 'c-format-buffer))
#+END_SRC
** GENERAL_INDENTING
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC
** C#
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (use-package csharp-mode)
#+END_SRC
** CLOJURE
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (use-package clojure-mode)

(defun my/clj-format-code ()
  "Format clojure code using cider commands."
  (interactive)
  (if (region-active-p)
      (cider-format-region (region-beginning) (region-end))
    (cider-format-buffer)))

(defun my/cider-repl-reset ()
  "Call (reset) in the active repl and return to the position where was called."
  (interactive)
  (save-window-excursion
    (cider-insert-in-repl "(reset)" t)))

(use-package cider
  :ensure t
  :bind (:map cider-mode-map
              ("C-c C-f" . my/clj-format-code)
              ("C-c C-r" . my/cider-repl-reset)))

(evil-leader/set-key-for-mode 'clojure-mode "d" 'cider-find-var)

(with-eval-after-load 'evil
  (evil-set-initial-state 'cider-stacktrace-mode 'emacs))

(use-package clj-refactor
  :ensure t
  :after cider
  :bind (:map clojure-mode-map
              ("C-c C-a" . cljr-add-project-dependency))
  :hook (clojure . clj-refactor))
#+END_SRC
** HASKELL
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package haskell-mode)
#+END_SRC
** IRONY
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package irony
:ensure t
:config
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
** COMMON_LISP
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package slime)
(setq inferior-lisp-program "sbcl")
#+END_SRC
** WEB_MODE
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(defun my/web-mode-hook ()
  (emmet-mode)
  (rainbow-delimiters-mode-disable)
  (autopair-mode -1))

(use-package web-mode
  :ensure t
  :custom
  (web-mode-enable-current-element-highlight t)
  (web-mode-enable-current-column-highlight t)
  :mode (("\\.html\\'" . web-mode)
         ("\\.html.eex\\'" . web-mode)
         ("\\.html.leex\\'" . web-mode)
         ("\\.html.heex\\'" . web-mode)
         ("\\.hbs\\'" . web-mode))
  :config
  (add-hook 'web-mode-hook 'my/web-mode-hook))
#+END_SRC
** EMMET_MODE
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package emmet-mode
  :ensure t)
#+END_SRC
** SASS_MODE
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package sass-mode
  :ensure t
  :defer t)
#+END_SRC
** RAINBOW_MODE
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package rainbow-mode
  :ensure t
  :hook
  ((css-mode . rainbow-mode)
   (sass-mode . rainbow-mode)
   (scss-mode . rainbow-mode)))
#+END_SRC
** JSON_MODE
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package json-mode
  :ensure t
  :defer t)
#+END_SRC
** PYTHON
#+BEGIN_SRC emacs-lisp :tangle ./init.el
reformatter-define python-black-format
  :program "black"
  :args '("-")
  :group 'python)

(reformatter-define python-isort-format
  :program "isort"
  :args '("-")
  :group 'python)

(use-package elpy
  :ensure t
  :hook (python-mode . elpy-enable)
  :custom
  (elpy-shell-echo-input . nil)
  :config
  (evil-leader/set-key-for-mode 'python-mode "d" 'elpy-goto-definition)
  ;; we need to "unset" to be able to make the same key-binding in python-mode
  (define-key elpy-mode-map (kbd "C-c C-f") nil)
  (setq elpy-rpc-python-command "python3")
  (add-hook 'elpy-mode-hook
            (lambda ()
              (highlight-indentation-mode -1)))) ; Remove vertical line

(setq python-shell-completion-native-enable nil)

(with-eval-after-load 'python
  (define-key python-mode-map (kbd "C-c C-f") 'python-black-format-buffer)
  (define-key python-mode-map (kbd "C-c C-i") 'python-isort-format-region))

(defun my/run-django-command ()
  "Run a django command."
  (interactive)
  (let* ((python-bin (concat (getenv "VIRTUAL_ENV") "/bin/python"))
         (manage-py-file (concat (my/project-root) "manage.py"))
         (default-directory (my/project-root))
         (raw-help (shell-command-to-string (concat python-bin " " manage-py-file " help")))
         (splited-lines (split-string raw-help "\n"))
         (options (seq-filter '(lambda (line) (cl-search "    " line)) splited-lines))
         (selection (completing-read "Pick django command: " (mapcar 'string-trim options)))
         (command (concat python-bin " " manage-py-file " " selection)))
    (compile command)))
#+END_SRC
** TYPESCIRIPT
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package typescript-mode
  :ensure t
  :defer t
  :config
  (evil-leader/set-key-for-mode 'typescript-mode "d" 'dumb-jump-go))
#+END_SRC
** RUST
#+BEGIN_SRC emacs-lisp :tangle ./init.el
use-package rust-mode
  :ensure t
  :if (executable-find "rustc"))

(use-package cargo
  :ensure t
  :if (executable-find "cargo")
  :after rust-mode
  :bind (:map cargo-minor-mode-map
              ("C-c C-t" . cargo-process-test)
              ("C-c C-b" . cargo-process-build)
              ("C-c C-c" . cargo-process-run))
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode))

(use-package racer
  :ensure t
  :if (executable-find "racer")
  :after rust-mode
  :custom
  (racer-rust-src-path "~/Code/rust/src/src")
  :hook ((rust-mode . racer-mode)
         (racer-mode . eldoc-mode)
         (racer-mode . company-mode))
  :config
  (evil-leader/set-key-for-mode 'rust-mode "d" 'racer-find-definition))
#+END_SRC

* COMPLETION
** IVY
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package ivy
:config
(ivy-mode 1))
#+END_SRC
** COUNSEL
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package counsel
:bind 
("C-x b" . 'counsel-switch-buffer)
("C-x C-f" . 'counsel-find-file))
#+END_SRC
** COMPANY
   #+BEGIN_SRC emacs-lisp :tangle ./init.el
   (use-package company
   :ensure t
   :config
   (setq company-idle-delay 0)
   (setq company-minimum-prefix-length 3))

   (with-eval-after-load 'company
   (define-key company-active-map (kbd "C-j") #'company-select-next)
   (define-key company-active-map (kbd "C-k") #'company-select-previous))
   #+END_SRC
** COMPANY_IRONY
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package company-irony
:ensure t
:config
(require 'company)
(add-to-list 'company-backends 'company-irony))
#+END_SRC

** COMPANY_HOOKS
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(with-eval-after-load 'company
(add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** IVY_RICH_ICONS
#+BEGIN_SRC emacs-lisp :tangle ./init.el
  (use-package all-the-icons-ivy-rich
  :init
(all-the-icons-ivy-rich-mode 1))
#+END_SRC
** IVY_RICH
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))
#+END_SRC
* MY_FUNCTIONS
you may have to use (revert-buffer-with-coding-system 'utf-8)
** NAVIGATION
#+BEGIN_SRC emacs-lisp :tangle ./init.el
   ;;Navigation functions (C-; C-n prefix)
   (global-set-key (kbd "C-; C-n c")(lambda()(interactive)(find-file "~/.emacs.d/frogmacs.org")))
   (global-set-key (kbd "C-; C-n h")(lambda()(interactive)(find-file "~/private/org/home.org")))
   (global-set-key (kbd "C-; C-n b")(lambda()(interactive)(find-file "~/private/org/books.org")))
   (global-set-key (kbd "C-; C-n w")(lambda()(interactive)(find-file "~/private/org/words.org")))
   (global-set-key (kbd "C-; C-n l")(lambda()(interactive)(find-file "~/private/org/language.org")))
   (global-set-key (kbd "C-; C-n m")(lambda()(interactive)(find-file "~/private/org/math.org")))
   (global-set-key (kbd "C-; C-n t")(lambda()(interactive)(find-file "~/private/org/tasks.org")))
   (global-set-key (kbd "C-; C-n d")(lambda()(interactive)(find-file "~/private/org/drills.org")))
#+END_SRC
** FADA_LETTERS
#+BEGIN_SRC emacs-lisp :tangle ./init.el
   ;;fada functions (C-; C-f prefix)
   ;;i'll also include additional letters
   ;; (Yasnippet doesn't seem to vibe well with pressing tab inside an org table)
   (global-set-key (kbd "C-; C-f a")(lambda()(interactive)(insert "á")))
   (global-set-key (kbd "C-; C-f e")(lambda()(interactive)(insert "é")))
   (global-set-key (kbd "C-; C-f i")(lambda()(interactive)(insert "í")))
   (global-set-key (kbd "C-; C-f o")(lambda()(interactive)(insert "ó")))
   (global-set-key (kbd "C-; C-f u")(lambda()(interactive)(insert "ú")))

   (global-set-key (kbd "C-; C-f A")(lambda()(interactive)(insert "Á")))
   (global-set-key (kbd "C-; C-f E")(lambda()(interactive)(insert "É")))
   (global-set-key (kbd "C-; C-f I")(lambda()(interactive)(insert "Í")))
   (global-set-key (kbd "C-; C-f O")(lambda()(interactive)(insert "Ó")))
   (global-set-key (kbd "C-; C-f U")(lambda()(interactive)(insert "Ú")))
#+END_SRC
** JAPANESE_LETTERS
#+BEGIN_SRC emacs-lisp :tangle ./init.el
   ;;japanese functions
   (global-set-key (kbd "C-; C-j a")(lambda()(interactive)(insert "あ")))
   (global-set-key (kbd "C-; C-j i")(lambda()(interactive)(insert "い")))
   (global-set-key (kbd "C-; C-j u")(lambda()(interactive)(insert "う")))
   (global-set-key (kbd "C-; C-j e")(lambda()(interactive)(insert "え")))
   (global-set-key (kbd "C-; C-j o")(lambda()(interactive)(insert "お")))

   (global-set-key (kbd "C-; C-j k a")(lambda()(interactive)(insert "か")))
   (global-set-key (kbd "C-; C-j k i")(lambda()(interactive)(insert "き")))
   (global-set-key (kbd "C-; C-j k u")(lambda()(interactive)(insert "く")))
   (global-set-key (kbd "C-; C-j k e")(lambda()(interactive)(insert "け")))
   (global-set-key (kbd "C-; C-j k o")(lambda()(interactive)(insert "こ")))

   (global-set-key (kbd "C-; C-j s a")(lambda()(interactive)(insert "さ")))
   (global-set-key (kbd "C-; C-j s i")(lambda()(interactive)(insert "し")))
   (global-set-key (kbd "C-; C-j s h")(lambda()(interactive)(insert "し")))
   (global-set-key (kbd "C-; C-j s u")(lambda()(interactive)(insert "す")))
   (global-set-key (kbd "C-; C-j s e")(lambda()(interactive)(insert "せ")))
   (global-set-key (kbd "C-; C-j s o")(lambda()(interactive)(insert "そ")))

   (global-set-key (kbd "C-; C-f N")(lambda()(interactive)(insert "Ñ")))
   (global-set-key (kbd "C-; C-f n")(lambda()(interactive)(insert "ñ")))
   (global-set-key (kbd "C-; C-f b")(lambda()(interactive)(insert "ß")))
   (global-set-key (kbd "C-; C-f B")(lambda()(interactive)(insert "ß")))
#+END_SRC
** PROJECT_GENERATION
*** C
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(defun c-gen () 
    (interactive)
     ;; get file name
    (setq project-name (read-string "enter project name: "))

    ;; make directories
    (make-directory project-name)
    (make-directory (concat project-name "/src"))
    (make-directory (concat project-name "/headers"))

    ;; generate readme
    (find-file (concat project-name "/readme.org"))
    (insert  "* " project-name "\n")
    (insert "By theadventureofe(John Gormley)\n")
    (insert "project description\n")
    (insert "the_adventure_of_e λ")
    (save-buffer)
    (kill-buffer)

    ;; generate main.c
    (find-file (concat project-name "/main.c"))

    (insert "/*\n    " project-name "\n")
    (insert "    By theadventureofe(John Gormley)\n")
    (insert "    project description\n")
    (insert "    the_adventure_of_e λ*/\n\n")

    (insert "#include <stdlib.h>\n")
    (insert "#include <stdio.h>\n\n")

    (insert "// print all included cmd args (removes compiler warning)\n")
    (insert "void arg_print(int argc, char** argv)\n")
    (insert "{\n")
    (insert "    for(int i = 1; i < argc; i++)\n")
    (insert "        printf(\"arg[%d]: %s\", i, argv[i]);\n")
    (insert "}\n\n")

    (insert "int main (int argc, char** argv)\n")
    (insert "{\n")
    (insert "    arg_print(argc, argv);\n")
    (insert "    printf(\"Hello, World!\\n\");\n")
    (insert "    return EXIT_SUCCESS;\n")
    (insert "}")
    
    (save-buffer)
    (kill-buffer)

    ;; generate makefile
    (find-file (concat project-name "/Makefile"))
    (insert "CC = clang\n")
    (insert "CFLAGS = -Wall -Wextra -pedantic\n")
    (insert "EXEC = " project-name "\n\n")

    (insert "output: main.o\n")
    (insert "\t$(CC) $(CFLAGS) main.o -o $(EXEC)\n\n")

    (insert "main.o: main.c\n")
    (insert "\t$(CC) -c $(CFLAGS) main.c\n\n")
    
    (insert "clean:\n")
    (insert "\trm *.o " project-name)
    (save-buffer)
    (kill-buffer)
)
#+END_SRC
*** C++
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(defun cpp-gen () 
    (interactive)
     ;; get file name
    (setq project-name (read-string "enter project name: "))

    ;; make directories
    (make-directory project-name)
    (make-directory (concat project-name "/src"))
    (make-directory (concat project-name "/headers"))

    ;; generate readme
    (find-file (concat project-name "/readme.org"))
    (insert  "* " project-name "\n")
    (insert "By theadventureofe(John Gormley)\n")
    (insert "project description\n")
    (insert "the_adventure_of_e λ")
    (save-buffer)
    (kill-buffer)

    ;; generate main.c
    (find-file (concat project-name "/main.cpp"))

    (insert "/*\n    " project-name "\n")
    (insert "    By theadventureofe(John Gormley)\n")
    (insert "    project description\n")
    (insert "    the_adventure_of_e λ*/\n\n")

    (insert "#include <iostream>\n")
    (insert "#include <vector>\n")
    (insert "#include <memory>\n")
    (insert "#include <map>\n\n")

    (insert "// print all included cmd args (removes compiler warning)\n")
    (insert "void arg_print(int argc, char** argv)\n")
    (insert "{\n")
    (insert "    for(int i = 1; i < argc; i++)\n")
    (insert "        printf(\"arg[%d]: %s\", i, argv[i]);\n")
    (insert "}\n\n")

    (insert "int main (int argc, char** argv)\n")
    (insert "{\n")
    (insert "    arg_print(argc, argv);\n")
    (insert "    std::cout << \"Hello, World!\\n\";\n")
    (insert "    return 0;\n")
    (insert "}")
    
    (save-buffer)
    (kill-buffer)

    ;; generate makefile
    (find-file (concat project-name "/Makefile"))
    (insert "CC = clang++\n")
    (insert "CFLAGS = -Wall -Wextra -pedantic\n")
    (insert "EXEC = " project-name "\n\n")

    (insert "output: main.o\n")
    (insert "\t$(CC) $(CFLAGS) main.o -o $(EXEC)\n\n")

    (insert "main.o: main.cpp\n")
    (insert "\t$(CC) -c $(CFLAGS) main.cpp\n\n")
    
    (insert "clean:\n")
    (insert "\trm *.o " project-name)
    (save-buffer)
    (kill-buffer)
)
#+END_SRC
** MISC_HYPER_FUNCTIONS
#+BEGIN_SRC emacs-lisp :tangle ./init.el
   ;; useful functions with hyper key
   (global-set-key (kbd "H-t") 'org-babel-tangle)
   (global-set-key (kbd "H-e") 'eshell)
   (global-set-key (kbd "H-u") 'upcase-word)
   (global-set-key (kbd "H-w") 'eval-last-sexp)
   (global-set-key (kbd "H-p") 'org-latex-preview)

   (global-set-key (kbd "H-ь") (lambda () (interactive) (shell-command "setxkbmap gb ")
(start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/Xmodmap")))

   (global-set-key (kbd "H-m") (lambda () (interactive) (shell-command "setxkbmap ru ")
(start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/Xmodmap")))
#+END_SRC
* GO_HOME
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(find-file "~/private/org/home.org")
#+END_SRC
